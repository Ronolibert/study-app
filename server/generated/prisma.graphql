# source: https://us1.prisma.sh/ron-cruz-778a64/study-thing/dev
# timestamp: Tue Apr 09 2019 00:04:45 GMT-0700 (Pacific Daylight Time)

type AggregateCard {
  count: Int!
}

type AggregateDeck {
  count: Int!
}

type AggregateFolder {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type BatchPayload {
  """The number of nodes that have been affected by the Batch operation."""
  count: Long!
}

type Card implements Node {
  id: ID!
  term: String!
  definition: String!
}

"""A connection to a list of items."""
type CardConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [CardEdge]!
  aggregate: AggregateCard!
}

input CardCreateInput {
  id: ID
  term: String!
  definition: String!
}

input CardCreateManyInput {
  create: [CardCreateInput!]
  connect: [CardWhereUniqueInput!]
}

"""An edge in a connection."""
type CardEdge {
  """The item at the end of the edge."""
  node: Card!

  """A cursor for use in pagination."""
  cursor: String!
}

enum CardOrderByInput {
  id_ASC
  id_DESC
  term_ASC
  term_DESC
  definition_ASC
  definition_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type CardPreviousValues {
  id: ID!
  term: String!
  definition: String!
}

input CardScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [CardScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [CardScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [CardScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  term: String

  """All values that are not equal to given value."""
  term_not: String

  """All values that are contained in given list."""
  term_in: [String!]

  """All values that are not contained in given list."""
  term_not_in: [String!]

  """All values less than the given value."""
  term_lt: String

  """All values less than or equal the given value."""
  term_lte: String

  """All values greater than the given value."""
  term_gt: String

  """All values greater than or equal the given value."""
  term_gte: String

  """All values containing the given string."""
  term_contains: String

  """All values not containing the given string."""
  term_not_contains: String

  """All values starting with the given string."""
  term_starts_with: String

  """All values not starting with the given string."""
  term_not_starts_with: String

  """All values ending with the given string."""
  term_ends_with: String

  """All values not ending with the given string."""
  term_not_ends_with: String
  definition: String

  """All values that are not equal to given value."""
  definition_not: String

  """All values that are contained in given list."""
  definition_in: [String!]

  """All values that are not contained in given list."""
  definition_not_in: [String!]

  """All values less than the given value."""
  definition_lt: String

  """All values less than or equal the given value."""
  definition_lte: String

  """All values greater than the given value."""
  definition_gt: String

  """All values greater than or equal the given value."""
  definition_gte: String

  """All values containing the given string."""
  definition_contains: String

  """All values not containing the given string."""
  definition_not_contains: String

  """All values starting with the given string."""
  definition_starts_with: String

  """All values not starting with the given string."""
  definition_not_starts_with: String

  """All values ending with the given string."""
  definition_ends_with: String

  """All values not ending with the given string."""
  definition_not_ends_with: String
}

type CardSubscriptionPayload {
  mutation: MutationType!
  node: Card
  updatedFields: [String!]
  previousValues: CardPreviousValues
}

input CardSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [CardSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [CardSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [CardSubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: CardWhereInput
}

input CardUpdateDataInput {
  term: String
  definition: String
}

input CardUpdateInput {
  term: String
  definition: String
}

input CardUpdateManyDataInput {
  term: String
  definition: String
}

input CardUpdateManyInput {
  create: [CardCreateInput!]
  connect: [CardWhereUniqueInput!]
  set: [CardWhereUniqueInput!]
  disconnect: [CardWhereUniqueInput!]
  delete: [CardWhereUniqueInput!]
  update: [CardUpdateWithWhereUniqueNestedInput!]
  updateMany: [CardUpdateManyWithWhereNestedInput!]
  deleteMany: [CardScalarWhereInput!]
  upsert: [CardUpsertWithWhereUniqueNestedInput!]
}

input CardUpdateManyMutationInput {
  term: String
  definition: String
}

input CardUpdateManyWithWhereNestedInput {
  where: CardScalarWhereInput!
  data: CardUpdateManyDataInput!
}

input CardUpdateWithWhereUniqueNestedInput {
  where: CardWhereUniqueInput!
  data: CardUpdateDataInput!
}

input CardUpsertWithWhereUniqueNestedInput {
  where: CardWhereUniqueInput!
  update: CardUpdateDataInput!
  create: CardCreateInput!
}

input CardWhereInput {
  """Logical AND on all given filters."""
  AND: [CardWhereInput!]

  """Logical OR on all given filters."""
  OR: [CardWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [CardWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  term: String

  """All values that are not equal to given value."""
  term_not: String

  """All values that are contained in given list."""
  term_in: [String!]

  """All values that are not contained in given list."""
  term_not_in: [String!]

  """All values less than the given value."""
  term_lt: String

  """All values less than or equal the given value."""
  term_lte: String

  """All values greater than the given value."""
  term_gt: String

  """All values greater than or equal the given value."""
  term_gte: String

  """All values containing the given string."""
  term_contains: String

  """All values not containing the given string."""
  term_not_contains: String

  """All values starting with the given string."""
  term_starts_with: String

  """All values not starting with the given string."""
  term_not_starts_with: String

  """All values ending with the given string."""
  term_ends_with: String

  """All values not ending with the given string."""
  term_not_ends_with: String
  definition: String

  """All values that are not equal to given value."""
  definition_not: String

  """All values that are contained in given list."""
  definition_in: [String!]

  """All values that are not contained in given list."""
  definition_not_in: [String!]

  """All values less than the given value."""
  definition_lt: String

  """All values less than or equal the given value."""
  definition_lte: String

  """All values greater than the given value."""
  definition_gt: String

  """All values greater than or equal the given value."""
  definition_gte: String

  """All values containing the given string."""
  definition_contains: String

  """All values not containing the given string."""
  definition_not_contains: String

  """All values starting with the given string."""
  definition_starts_with: String

  """All values not starting with the given string."""
  definition_not_starts_with: String

  """All values ending with the given string."""
  definition_ends_with: String

  """All values not ending with the given string."""
  definition_not_ends_with: String
}

input CardWhereUniqueInput {
  id: ID
}

type Deck implements Node {
  id: ID!
  title: String!
  description: String
  cards(where: CardWhereInput, orderBy: CardOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Card!]
  owner: User!
}

"""A connection to a list of items."""
type DeckConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [DeckEdge]!
  aggregate: AggregateDeck!
}

input DeckCreateInput {
  id: ID
  title: String!
  description: String
  cards: CardCreateManyInput
  owner: UserCreateOneWithoutDecksInput!
}

input DeckCreateManyWithoutOwnerInput {
  create: [DeckCreateWithoutOwnerInput!]
  connect: [DeckWhereUniqueInput!]
}

input DeckCreateWithoutOwnerInput {
  id: ID
  title: String!
  description: String
  cards: CardCreateManyInput
}

"""An edge in a connection."""
type DeckEdge {
  """The item at the end of the edge."""
  node: Deck!

  """A cursor for use in pagination."""
  cursor: String!
}

enum DeckOrderByInput {
  id_ASC
  id_DESC
  title_ASC
  title_DESC
  description_ASC
  description_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type DeckPreviousValues {
  id: ID!
  title: String!
  description: String
}

input DeckScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [DeckScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [DeckScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [DeckScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  title: String

  """All values that are not equal to given value."""
  title_not: String

  """All values that are contained in given list."""
  title_in: [String!]

  """All values that are not contained in given list."""
  title_not_in: [String!]

  """All values less than the given value."""
  title_lt: String

  """All values less than or equal the given value."""
  title_lte: String

  """All values greater than the given value."""
  title_gt: String

  """All values greater than or equal the given value."""
  title_gte: String

  """All values containing the given string."""
  title_contains: String

  """All values not containing the given string."""
  title_not_contains: String

  """All values starting with the given string."""
  title_starts_with: String

  """All values not starting with the given string."""
  title_not_starts_with: String

  """All values ending with the given string."""
  title_ends_with: String

  """All values not ending with the given string."""
  title_not_ends_with: String
  description: String

  """All values that are not equal to given value."""
  description_not: String

  """All values that are contained in given list."""
  description_in: [String!]

  """All values that are not contained in given list."""
  description_not_in: [String!]

  """All values less than the given value."""
  description_lt: String

  """All values less than or equal the given value."""
  description_lte: String

  """All values greater than the given value."""
  description_gt: String

  """All values greater than or equal the given value."""
  description_gte: String

  """All values containing the given string."""
  description_contains: String

  """All values not containing the given string."""
  description_not_contains: String

  """All values starting with the given string."""
  description_starts_with: String

  """All values not starting with the given string."""
  description_not_starts_with: String

  """All values ending with the given string."""
  description_ends_with: String

  """All values not ending with the given string."""
  description_not_ends_with: String
}

type DeckSubscriptionPayload {
  mutation: MutationType!
  node: Deck
  updatedFields: [String!]
  previousValues: DeckPreviousValues
}

input DeckSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [DeckSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [DeckSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [DeckSubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: DeckWhereInput
}

input DeckUpdateInput {
  title: String
  description: String
  cards: CardUpdateManyInput
  owner: UserUpdateOneRequiredWithoutDecksInput
}

input DeckUpdateManyDataInput {
  title: String
  description: String
}

input DeckUpdateManyMutationInput {
  title: String
  description: String
}

input DeckUpdateManyWithoutOwnerInput {
  create: [DeckCreateWithoutOwnerInput!]
  connect: [DeckWhereUniqueInput!]
  set: [DeckWhereUniqueInput!]
  disconnect: [DeckWhereUniqueInput!]
  delete: [DeckWhereUniqueInput!]
  update: [DeckUpdateWithWhereUniqueWithoutOwnerInput!]
  updateMany: [DeckUpdateManyWithWhereNestedInput!]
  deleteMany: [DeckScalarWhereInput!]
  upsert: [DeckUpsertWithWhereUniqueWithoutOwnerInput!]
}

input DeckUpdateManyWithWhereNestedInput {
  where: DeckScalarWhereInput!
  data: DeckUpdateManyDataInput!
}

input DeckUpdateWithoutOwnerDataInput {
  title: String
  description: String
  cards: CardUpdateManyInput
}

input DeckUpdateWithWhereUniqueWithoutOwnerInput {
  where: DeckWhereUniqueInput!
  data: DeckUpdateWithoutOwnerDataInput!
}

input DeckUpsertWithWhereUniqueWithoutOwnerInput {
  where: DeckWhereUniqueInput!
  update: DeckUpdateWithoutOwnerDataInput!
  create: DeckCreateWithoutOwnerInput!
}

input DeckWhereInput {
  """Logical AND on all given filters."""
  AND: [DeckWhereInput!]

  """Logical OR on all given filters."""
  OR: [DeckWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [DeckWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  title: String

  """All values that are not equal to given value."""
  title_not: String

  """All values that are contained in given list."""
  title_in: [String!]

  """All values that are not contained in given list."""
  title_not_in: [String!]

  """All values less than the given value."""
  title_lt: String

  """All values less than or equal the given value."""
  title_lte: String

  """All values greater than the given value."""
  title_gt: String

  """All values greater than or equal the given value."""
  title_gte: String

  """All values containing the given string."""
  title_contains: String

  """All values not containing the given string."""
  title_not_contains: String

  """All values starting with the given string."""
  title_starts_with: String

  """All values not starting with the given string."""
  title_not_starts_with: String

  """All values ending with the given string."""
  title_ends_with: String

  """All values not ending with the given string."""
  title_not_ends_with: String
  description: String

  """All values that are not equal to given value."""
  description_not: String

  """All values that are contained in given list."""
  description_in: [String!]

  """All values that are not contained in given list."""
  description_not_in: [String!]

  """All values less than the given value."""
  description_lt: String

  """All values less than or equal the given value."""
  description_lte: String

  """All values greater than the given value."""
  description_gt: String

  """All values greater than or equal the given value."""
  description_gte: String

  """All values containing the given string."""
  description_contains: String

  """All values not containing the given string."""
  description_not_contains: String

  """All values starting with the given string."""
  description_starts_with: String

  """All values not starting with the given string."""
  description_not_starts_with: String

  """All values ending with the given string."""
  description_ends_with: String

  """All values not ending with the given string."""
  description_not_ends_with: String
  cards_every: CardWhereInput
  cards_some: CardWhereInput
  cards_none: CardWhereInput
  owner: UserWhereInput
}

input DeckWhereUniqueInput {
  id: ID
}

type Folder implements Node {
  id: ID!
  name: String!
  subfolder: Folder
}

"""A connection to a list of items."""
type FolderConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [FolderEdge]!
  aggregate: AggregateFolder!
}

input FolderCreateInput {
  id: ID
  name: String!
  subfolder: FolderCreateOneInput
}

input FolderCreateOneInput {
  create: FolderCreateInput
  connect: FolderWhereUniqueInput
}

"""An edge in a connection."""
type FolderEdge {
  """The item at the end of the edge."""
  node: Folder!

  """A cursor for use in pagination."""
  cursor: String!
}

enum FolderOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type FolderPreviousValues {
  id: ID!
  name: String!
}

type FolderSubscriptionPayload {
  mutation: MutationType!
  node: Folder
  updatedFields: [String!]
  previousValues: FolderPreviousValues
}

input FolderSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [FolderSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [FolderSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [FolderSubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: FolderWhereInput
}

input FolderUpdateDataInput {
  name: String
  subfolder: FolderUpdateOneInput
}

input FolderUpdateInput {
  name: String
  subfolder: FolderUpdateOneInput
}

input FolderUpdateManyMutationInput {
  name: String
}

input FolderUpdateOneInput {
  create: FolderCreateInput
  connect: FolderWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: FolderUpdateDataInput
  upsert: FolderUpsertNestedInput
}

input FolderUpsertNestedInput {
  update: FolderUpdateDataInput!
  create: FolderCreateInput!
}

input FolderWhereInput {
  """Logical AND on all given filters."""
  AND: [FolderWhereInput!]

  """Logical OR on all given filters."""
  OR: [FolderWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [FolderWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  subfolder: FolderWhereInput
}

input FolderWhereUniqueInput {
  id: ID
}

"""
The `Long` scalar type represents non-fractional signed whole numeric values.
Long can represent values between -(2^63) and 2^63 - 1.
"""
scalar Long

type Mutation {
  createUser(data: UserCreateInput!): User!
  createDeck(data: DeckCreateInput!): Deck!
  createFolder(data: FolderCreateInput!): Folder!
  createCard(data: CardCreateInput!): Card!
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  updateDeck(data: DeckUpdateInput!, where: DeckWhereUniqueInput!): Deck
  updateFolder(data: FolderUpdateInput!, where: FolderWhereUniqueInput!): Folder
  updateCard(data: CardUpdateInput!, where: CardWhereUniqueInput!): Card
  deleteUser(where: UserWhereUniqueInput!): User
  deleteDeck(where: DeckWhereUniqueInput!): Deck
  deleteFolder(where: FolderWhereUniqueInput!): Folder
  deleteCard(where: CardWhereUniqueInput!): Card
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  upsertDeck(where: DeckWhereUniqueInput!, create: DeckCreateInput!, update: DeckUpdateInput!): Deck!
  upsertFolder(where: FolderWhereUniqueInput!, create: FolderCreateInput!, update: FolderUpdateInput!): Folder!
  upsertCard(where: CardWhereUniqueInput!, create: CardCreateInput!, update: CardUpdateInput!): Card!
  updateManyUsers(data: UserUpdateManyMutationInput!, where: UserWhereInput): BatchPayload!
  updateManyDecks(data: DeckUpdateManyMutationInput!, where: DeckWhereInput): BatchPayload!
  updateManyFolders(data: FolderUpdateManyMutationInput!, where: FolderWhereInput): BatchPayload!
  updateManyCards(data: CardUpdateManyMutationInput!, where: CardWhereInput): BatchPayload!
  deleteManyUsers(where: UserWhereInput): BatchPayload!
  deleteManyDecks(where: DeckWhereInput): BatchPayload!
  deleteManyFolders(where: FolderWhereInput): BatchPayload!
  deleteManyCards(where: CardWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

"""An object with an ID"""
interface Node {
  """The id of the object."""
  id: ID!
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String

  """When paginating forwards, the cursor to continue."""
  endCursor: String
}

type Query {
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  decks(where: DeckWhereInput, orderBy: DeckOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Deck]!
  folders(where: FolderWhereInput, orderBy: FolderOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Folder]!
  cards(where: CardWhereInput, orderBy: CardOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Card]!
  user(where: UserWhereUniqueInput!): User
  deck(where: DeckWhereUniqueInput!): Deck
  folder(where: FolderWhereUniqueInput!): Folder
  card(where: CardWhereUniqueInput!): Card
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!
  decksConnection(where: DeckWhereInput, orderBy: DeckOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): DeckConnection!
  foldersConnection(where: FolderWhereInput, orderBy: FolderOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): FolderConnection!
  cardsConnection(where: CardWhereInput, orderBy: CardOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): CardConnection!

  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
  ): Node
}

type Subscription {
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
  deck(where: DeckSubscriptionWhereInput): DeckSubscriptionPayload
  folder(where: FolderSubscriptionWhereInput): FolderSubscriptionPayload
  card(where: CardSubscriptionWhereInput): CardSubscriptionPayload
}

type User implements Node {
  id: ID!
  name: String!
  email: String!
  password: String!
  resetToken: String
  resetTokenExpiry: Float
  decks(where: DeckWhereInput, orderBy: DeckOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Deck!]
}

"""A connection to a list of items."""
type UserConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  id: ID
  name: String!
  email: String!
  password: String!
  resetToken: String
  resetTokenExpiry: Float
  decks: DeckCreateManyWithoutOwnerInput
}

input UserCreateOneWithoutDecksInput {
  create: UserCreateWithoutDecksInput
  connect: UserWhereUniqueInput
}

input UserCreateWithoutDecksInput {
  id: ID
  name: String!
  email: String!
  password: String!
  resetToken: String
  resetTokenExpiry: Float
}

"""An edge in a connection."""
type UserEdge {
  """The item at the end of the edge."""
  node: User!

  """A cursor for use in pagination."""
  cursor: String!
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  email_ASC
  email_DESC
  password_ASC
  password_DESC
  resetToken_ASC
  resetToken_DESC
  resetTokenExpiry_ASC
  resetTokenExpiry_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type UserPreviousValues {
  id: ID!
  name: String!
  email: String!
  password: String!
  resetToken: String
  resetTokenExpiry: Float
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [UserSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [UserSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [UserSubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: UserWhereInput
}

input UserUpdateInput {
  name: String
  email: String
  password: String
  resetToken: String
  resetTokenExpiry: Float
  decks: DeckUpdateManyWithoutOwnerInput
}

input UserUpdateManyMutationInput {
  name: String
  email: String
  password: String
  resetToken: String
  resetTokenExpiry: Float
}

input UserUpdateOneRequiredWithoutDecksInput {
  create: UserCreateWithoutDecksInput
  connect: UserWhereUniqueInput
  update: UserUpdateWithoutDecksDataInput
  upsert: UserUpsertWithoutDecksInput
}

input UserUpdateWithoutDecksDataInput {
  name: String
  email: String
  password: String
  resetToken: String
  resetTokenExpiry: Float
}

input UserUpsertWithoutDecksInput {
  update: UserUpdateWithoutDecksDataInput!
  create: UserCreateWithoutDecksInput!
}

input UserWhereInput {
  """Logical AND on all given filters."""
  AND: [UserWhereInput!]

  """Logical OR on all given filters."""
  OR: [UserWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [UserWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  email: String

  """All values that are not equal to given value."""
  email_not: String

  """All values that are contained in given list."""
  email_in: [String!]

  """All values that are not contained in given list."""
  email_not_in: [String!]

  """All values less than the given value."""
  email_lt: String

  """All values less than or equal the given value."""
  email_lte: String

  """All values greater than the given value."""
  email_gt: String

  """All values greater than or equal the given value."""
  email_gte: String

  """All values containing the given string."""
  email_contains: String

  """All values not containing the given string."""
  email_not_contains: String

  """All values starting with the given string."""
  email_starts_with: String

  """All values not starting with the given string."""
  email_not_starts_with: String

  """All values ending with the given string."""
  email_ends_with: String

  """All values not ending with the given string."""
  email_not_ends_with: String
  password: String

  """All values that are not equal to given value."""
  password_not: String

  """All values that are contained in given list."""
  password_in: [String!]

  """All values that are not contained in given list."""
  password_not_in: [String!]

  """All values less than the given value."""
  password_lt: String

  """All values less than or equal the given value."""
  password_lte: String

  """All values greater than the given value."""
  password_gt: String

  """All values greater than or equal the given value."""
  password_gte: String

  """All values containing the given string."""
  password_contains: String

  """All values not containing the given string."""
  password_not_contains: String

  """All values starting with the given string."""
  password_starts_with: String

  """All values not starting with the given string."""
  password_not_starts_with: String

  """All values ending with the given string."""
  password_ends_with: String

  """All values not ending with the given string."""
  password_not_ends_with: String
  resetToken: String

  """All values that are not equal to given value."""
  resetToken_not: String

  """All values that are contained in given list."""
  resetToken_in: [String!]

  """All values that are not contained in given list."""
  resetToken_not_in: [String!]

  """All values less than the given value."""
  resetToken_lt: String

  """All values less than or equal the given value."""
  resetToken_lte: String

  """All values greater than the given value."""
  resetToken_gt: String

  """All values greater than or equal the given value."""
  resetToken_gte: String

  """All values containing the given string."""
  resetToken_contains: String

  """All values not containing the given string."""
  resetToken_not_contains: String

  """All values starting with the given string."""
  resetToken_starts_with: String

  """All values not starting with the given string."""
  resetToken_not_starts_with: String

  """All values ending with the given string."""
  resetToken_ends_with: String

  """All values not ending with the given string."""
  resetToken_not_ends_with: String
  resetTokenExpiry: Float

  """All values that are not equal to given value."""
  resetTokenExpiry_not: Float

  """All values that are contained in given list."""
  resetTokenExpiry_in: [Float!]

  """All values that are not contained in given list."""
  resetTokenExpiry_not_in: [Float!]

  """All values less than the given value."""
  resetTokenExpiry_lt: Float

  """All values less than or equal the given value."""
  resetTokenExpiry_lte: Float

  """All values greater than the given value."""
  resetTokenExpiry_gt: Float

  """All values greater than or equal the given value."""
  resetTokenExpiry_gte: Float
  decks_every: DeckWhereInput
  decks_some: DeckWhereInput
  decks_none: DeckWhereInput
}

input UserWhereUniqueInput {
  id: ID
  email: String
}
